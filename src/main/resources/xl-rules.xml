<?xml version="1.0"?>
<!--

    Copyright 2021 XEBIALABS

    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

-->
<rules xmlns="http://www.xebialabs.com/xl-deploy/xl-rules">

    <rule name="ansible.AnsibleRunner.checkAndAssign" scope="pre-plan">
        <planning-script-path>ansible_step/planning/set_ansible_controller.py</planning-script-path>
    </rule>

    <step-macro name="ansible">
        <parameters>
            <parameter name="description" type="string"/>
            <parameter name="order" type="integer"/>
            <parameter name="modulename" type="string" description="Name of the ansible module"/>
            <parameter name="moduleargs" type="string" description="Module arguments"/>
        </parameters>
        <steps>
            <os-script>
                <description expression="true">macro['description']</description>
                <order expression="true">macro['order']</order>
                <script>ansible_step/ansible.sh.ftl</script>
                <target-host expression="true">deployed.container.host.ansibleController</target-host>
                <upload-artifacts>false</upload-artifacts>
                <freemarker-context>
                    <modulename expression="true">macro['modulename']</modulename>
                    <moduleargs expression="true">macro['moduleargs']</moduleargs>
                    <target expression="true">deployed.container</target>
                    <host expression="true">deployed.container.host</host>
                    <description expression="true">macro['description']</description>
                </freemarker-context>
                <classpath-resources>
                    <value>ansible_step/inventory/xldeploy_ansible_inventory.ftl</value>
                </classpath-resources>
            </os-script>
        </steps>
    </step-macro>


    <step-macro name="ansible-playbook">
        <parameters>
            <parameter name="description" type="string"/>
            <parameter name="order" type="integer"/>
            <parameter name="roles" type="list_of_string" description="roles to apply"/>
            <parameter name="galaxyRoles" type="list_of_string" description="Galaxy Roles"/>
            <parameter name="variables" type="map_string_string" description="variables..."/>
            <parameter name="variableFile" type="map_string_string" description="variableFile..."/>
            <parameter name="devopsAsCodeTemplate" type="string" description="the devops as code template to process on the host side by ansible"/>
        </parameters>
        <steps>
            <os-script>
                <description expression="true">macro['description']</description>
                <order expression="true">macro['order']</order>
                <script>ansible_step/ansible-playbook</script>
                <!-- as the ansibleController can be assigned dynamically to the host's container, we force XLD to read it again to set the target-host property -->
                <target-host expression="true">repositoryService.read(deployed.container.host.ansibleController.host.id)</target-host>
                <freemarker-context>
                    <roles expression="true">macro['roles']</roles>
                    <galaxyRoles expression="true">macro['galaxyRoles']</galaxyRoles>
                    <variables expression="true">macro['variables']</variables>
                    <variableFile expression="true">macro['variableFile']</variableFile>
                    <target expression="true">deployed.container</target>
                    <host expression="true">deployed.container.host</host>
                    <ansibleController expression="true">deployed.container.ansibleController</ansibleController>
                    <deployedApplication expression="true">deployedApplication</deployedApplication>
                    <become expression="true">deployed.container.defaultBecome</become>
                    <devopsAsCodeTemplate  expression="true">deployed.computedDevopsAsCodeTemplate</devopsAsCodeTemplate>
                </freemarker-context>
                <classpath-resources>
                    <value>ansible_step/inventory/xldeploy_ansible_inventory.ftl</value>
                    <value>xldeploy_playbook.yml.ftl</value>
                    <value>ansible_step/xldeploy_extravars.json.ftl</value>
                    <value>ansible.cfg.ftl</value>
                </classpath-resources>
            </os-script>
        </steps>
    </step-macro>

    <rule name="ansible.Roles.ssh_keys.remote.loader" scope="plan">
        <planning-script-path>ssh_keys/planning/ssh-keys-remote-loader.py</planning-script-path>
    </rule>

    <rule name="ansible.Roles.joiner.devopsAsCode.templates" scope="pre-plan">
        <planning-script-path>planning/joiner.devopsascode.templates.py</planning-script-path>
    </rule>

    <rule name="ansible.Roles.apply" scope="deployed">
        <conditions>
            <type>ansible.Roles</type>
            <operation>CREATE</operation>
            <operation>MODIFY</operation>
        </conditions>
        <steps>
            <ansible-playbook>
                <description expression="true">"Apply {0} on {1}".format(deployed.name, deployed.container.name)</description>
                <order>55</order>
                <roles expression="true">deployed.roles</roles>
                <galaxyRoles expression="true">deployed.galaxyRoles</galaxyRoles>
                <variables expression="true">deployed.variables</variables>
                <variableFile expression="true">deployed.variableFile</variableFile>
                <devopsAsCodeTemplate expression="true">context.getAttribute("{0}_computedDevopsAsCodeTemplate".format(deployed.id))</devopsAsCodeTemplate>
            </ansible-playbook>
        </steps>
    </rule>


    <rule name="ansible.Roles.NOOP.apply" scope="deployed">
        <conditions>
            <type>ansible.Roles</type>
            <operation>NOOP</operation>
            <expression>deployed.applyRulesOnNOOP</expression>
        </conditions>
        <steps>
            <ansible-playbook>
                <description expression="true">"Apply {0} on {1}".format(deployed.name, deployed.container.name)</description>
                <order>55</order>
                <roles expression="true">deployed.roles</roles>
                <galaxyRoles expression="true">deployed.galaxyRoles</galaxyRoles>
                <variables expression="true">deployed.variables</variables>
                <variableFile expression="true">deployed.variableFile</variableFile>
            </ansible-playbook>
        </steps>
    </rule>


    <rule name="ansible.Roles.devopsAsCode.apply" scope="deployed">
        <conditions>
            <type>ansible.Roles</type>
            <operation>CREATE</operation>
            <operation>MODIFY</operation>
            <expression>deployed.includeDevOpsAsCodeTask</expression>
        </conditions>
        <steps>
            <jython>
                <description expression="true">"Apply the devops-as-code definition fetched from {1}".format(deployed.container.host.name, deployed.container.name)</description>
                <script>devops-as-code/apply.py</script>
                <order>90</order>
                <jython-context>
                    <ansible_controller_id expression="true">deployed.container.host.ansibleController.id</ansible_controller_id>
                    <yaml_file expression="true">
                        "{0}/{1}/tmp/digital.ai_xldeploy.yaml".format(deployed.container.host.ansibleController.devopsAsCodeDirectory, deployed.container.host.name)
                    </yaml_file>
                    <ansibleController expression="true">deployed.container.host.ansibleController</ansibleController>
                </jython-context>
            </jython>

            <jython>
                <description expression="true">"Add new provisioned CI from {0} to the environment".format(deployed.container.name)</description>
                <order>95</order>
                <script>devops-as-code/add_ci_to_env.py</script>
                <jython-context>
                    <environment expression="true">deployedApplication.environment</environment>
                    <provisioned_host expression="true">deployed.container.host</provisioned_host>
                </jython-context>
            </jython>
        </steps>
    </rule>

    <rule name="ansible.Roles.Noop.devopsAsCode.apply" scope="deployed">
        <conditions>
            <type>ansible.Roles</type>
            <operation>NOOP</operation>
            <expression>deployed.includeDevOpsAsCodeTask and deployed.applyRulesOnNOOP</expression>
        </conditions>
        <steps>
            <jython>
                <description expression="true">"Apply the devops-as-code definition fetched from {1}".format(deployed.container.host.name, deployed.container.name)</description>
                <script>devops-as-code/apply.py</script>
                <order>90</order>
                <jython-context>
                    <ansible_controller_id expression="true">deployed.container.host.ansibleController.id</ansible_controller_id>
                    <yaml_file expression="true">
                        "{0}/{1}/tmp/digital.ai_xldeploy.yaml".format(deployed.container.host.ansibleController.devopsAsCodeDirectory, deployed.container.host.name)
                    </yaml_file>
                    <ansibleController expression="true">deployed.container.host.ansibleController</ansibleController>
                </jython-context>
            </jython>
            <jython>
                <description expression="true">"Add new provisioned CI from {0} to the environment".format(deployed.container.name)</description>
                <order>95</order>
                <script>devops-as-code/add_ci_to_env.py</script>
                <jython-context>
                    <environment expression="true">deployedApplication.environment</environment>
                    <provisioned_host expression="true">deployed.container.host</provisioned_host>
                </jython-context>
            </jython>
        </steps>
    </rule>


</rules>
